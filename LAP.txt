Practical 1: Write a program which demonstrates the following:
a. Addition of two complex numbers
b. Displaying the conjugate of a complex number
c. Plotting a set of complex numbers
d. Creating a new plot by rotating the given number by a degree 90, 180, 270 
degrees and
also by scaling by a number a=1/2, a=1/3, a=2 etc.
Code:
import matplotlib.pyplot as plt
S = {3+3j, 4+3j , 2+1j, 2.5+1j, 3.25+1j}
print("select Operation:")
print("1:Addition of 2 complex number")
print("2:Plot point from set of complex number")
print("3:Translation")
print("4:Rotation")
print("5:Scaling")
print("6:Exit")
while True:
 ch = int(input("Enter choice of Operation: "))
 if ch==1:
 c1=complex(input("Enter Complex number c1: "))
 c2=complex(input("Enter Complex number c2: "))
 print("Addition of 2 complex numbers: ",c1+c2)
 elif ch==2:
 S1={x for x in S}
 elif ch==3:
 c1=complex(input("Enter translation in complex numbers:"))
 S1={x+c1 for x in S}
 elif ch==5:
 scale = float(input("Enter Scale point like (.5) for 1/2:"))
 S1 = {x*scale for x in S}
 elif ch==4:
 angle=int(input("Enter Angle of Rotation:"))
 if angle==90:
 S1= {x*1j for x in S}
 elif angle==180:
 S1={x*(-1) for x in S}
 elif angle==270:
 S1={x*1j*(-1) for x in S}
 else:
 print("Invalid Angle entered")
 elif ch==6:
 break
X=[x.real for x in S1]
Y=[x.imag for x in S1]
plt.plot(X,Y,'ro')
plt.axis([-6,6,-6,6])
plt.show()
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Practical 2: Write a program to do the following:
a. Enter two distinct faces as vectors u and v.
b. Find a new face as a linear combination of u and v i.e. au+bv for a and b 
c. Find the average face of the original faces.
Code:
def scalMul(x,p):
 return [x[i] * p for i in range(len(x))]
def linCom(vlist,clist):
 s = [scalMul(vlist[i],clist[i])for i in range(len(vlist))]
 l = []
 for j in range(len(s[0])):
 su = 0
 for i in range(len(s)):
 su = su + s[i][j]
 l.append(su)
 return 1
l = int(input("Enter the length of vector :"))
u = []
v = []
c = []
print("Enter the elements of vector u :")
for i in range(l):
 n = int(input("Enter number :"))
 u.append(n)
print("Enter the elements of vector v :")
for i in range(l):
 n = int(input("Enter number :"))
 v.append(n) 
print("Enter the elements of coefficient :")
c1 = int(input("Enter the coefficients of c1 :"))
c2 = int(input("Enter the coefficients of c2 :"))
newFace = [c1*u[i] + c2*v[i] for i in range(len(u))]
print("New Face of u and v : ", newFace)
avgFace = [(u[i]+v[i])/2 for i in range(len(u))]
print("Average Face of u and v is :", avgFace)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Practical 3: Write a program to do the following:
a. Enter a vector u as a n-list
b. Enter another vector v as a n-list
c. Find the vector au+bv for different values of a and b
d. Find the dot product of u and v
Code:
def scalarMul(x,p,y,q):
 return sum([(x[i]*p)+(y[i]*q) for i in range (len(x))])
def dotMul(x,y):
 return sum([x[i]*y[i] for i in range (len(x))])
v=[]
u=[]
n=int(input("Enter the no. of Elements you want to enter in vector: "))
print("Enter Elements of vector u: ")
for i in range(n):
 e=int(input("Enter elements: "))
 u.append(e)
print("Vector u = ",u)
print("Enter Elements of vector v: ")
for i in range(n):
 e=int(input("Enter elements: "))
 v.append(e)
print("Vector v = ",v)
while True:
 print("Select Vector Operation: ")
 print("1: Scalar Multiplication")
 print("2 : Dot Product")
 print("3: Exit")
 ch=int(input("Enter your Choice: "))
 if ch==1:
 print("To perform Scalar Multiplication")
 a=int(input("Enter the value of a: "))
 b=int(input("Enter the value of b: "))
 print("Sclar Multiplication =",scalarMul(u,a,v,b))
 elif ch==2:
 print("Dot Product of two matrix is: ",dotMul(u,v))
 elif ch==3:
 print("Program Terminated Successfully")
------------------------------------------------------------------------------------------------------------------------------------------------------
Practical 4: Write a program to do the following:
a. Enter an r by c matrix M (r and c being positive integers)
b. Display M in matrix format
c. Display the rows and columns of the matrix M
d. Find the scalar multiplication of M for a given scalar.
e. Find the transpose of the matrix M
Code:
#Practical 4
global r,c
#display M in matrix format
def printmatrix(A):
 print('the entered matrix M is')
 for i in range(r):
 print(A[i])
#display rows of matrix
def printrows(A):
 print('Rows of matrix')
 for i in range (r):
 print('Row%d='%i,A[i])
#display columns of matrix
def printcolumns(A):
 print('columns of matrix')
 for j in range(c):
 print('column%d='%j,end="")
 for i in range(r):
 print(A[i][j],end="")
 print('\n')
#Scalar Multiplication
def scalarmul(A,s):
 N=[[s*A[i][j] for j in range(c)] for i in range(r)]
 print('The scalar multiplication s*M=')
 printmatrix(N)
#tranpose of matrix M
def transpose(A):
 T=[[A[i][j] for i in range(r)]for j in range(c)]
 print('Transpose of M.T=')
 for j in range(c):
 print(T[j])
#Enter rXc Matrix M
print ('enter the dimensions of matrix ')
r=int(input('enter no of rows'))
c=int(input('enter no of columns'))
M=[]
for i in range (r):
 print('enter elements of row',i)
 M.append([])
 for j in range(c):
 n=int(input('enter no'))
 M[i].append(n)
print('Select operation')
print('1:Display Matrix')
print('2:Display rows of matrix')
print('3:Display columns of matrix')
print('4:Scalar Multiplication of matrix')
print('5:Transpose of matrix')
print('6:Exit')
while True:
 ch=int(input('Enter choice for Operation'))
 if ch==1:
 printmatrix(M)
 elif ch==2:
 printrows(M)
 elif ch==3:
 printcolumns(M)
 elif ch==4:
 sc=int(input('enter scalar value'))
 scalarmul(M,sc)
 elif ch==5:
 transpose(M)
 elif ch==6:
 break
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Practical 5: Write a program to do the following:
a. Find the vector â€“matrix multiplication of a r by c matrix M with an c-vector u.
b. Find the matrix-matrix product of M with a c by p matrix N
Code:
import numpy as np
def vecMatrixMult():
 r =int(input("Enter length of vector and number of rows in matrix:"))
 c =int(input("Enter number of columns in matrix:"))
 v=[]
 M=[]
 print("Enter Vectors")
 for i in range(r):
 n=int(input("Enter number:"))
 v.append(n)
 print("Enter Matrix")
 for i in range(r):
 print("Enter Elements of Rows: ",i+1)
 M.append([])
 for j in range(c):
 n=int(input("Enter Number: "))
 M[i].append(n)
 print("\nResult of Vector-Matrix multiplication is",np.dot(v,M))
def matrixmult():
 M=[]
 N=[]
 r1 =int(input("Enter number of rows in matrix1:"))
 c1 =int(input("Enter number of columns in matrix1:"))
 print("Enter Matrix1")
 for i in range(r1):
 print("Enter Elements of Rows: ",i+1)
 M.append([])
 for j in range(c1):
 n=int(input("Enter Number: "))
 M[i].append(n)
 r2 =int(input("Enter number of rows in matrix2:"))
 c2 =int(input("Enter number of columns in matrix2:"))
 print("Enter Matrix2")
 for i in range(r2):
 print("Enter Elements of Rows: ",i+1)
 N.append([])
 for j in range(c2):
 n=int(input("Enter Number: "))
 N[i].append(n)
 if(c1 == r2):
 Mult=np.dot(M,N)
 print("\nResult of Matrix multiplication is")
 for i in Mult:
 print(i)
while True:
 print("Select Operations")
 print("1. Vector-Matrix Multiplication")
 print("2. Matrix Multiplication")
 print("3. Exit")
 ch=int(input("Enter your choice: "))
 if ch==1:
 vecMatrixMult()
 elif ch==2:
 matrixmult()
 else:
 break
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Practical 6: Write a program to enter a matrix and check if it is invertible. If the inverse 
exists, find the inverse
Code:
import numpy as np
def printMatrix(A):
 print("\nMatrix")
 for i in range(len(A)):
 print(A[i]) 
c=int(input("Enter the Number of rows and cols of Square Matrix: "))
r=c
M=[]
for i in range(r):
 print("Enter Elements of Rows: ",i)
 M.append([])
 for j in range(c):
 n=int(input("Enter Number: "))
 M[i].append(n)
printMatrix(M)
a=np.linalg.det(M)
print("Determinant of matrix M is",a)
if a<=0:
 Minv = np.linalg.inv(M)
 print("The Inverse of matrix m is\n",Minv)
else:
 print("Matrix is not invertible")
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Practical 7: Write a program to convert a matrix into its row echelon form
Code:
def row_echelon(m):
 if not m: return
 lead= 0
 rowCount = len(m)
 colCount =len(m[0])
 for r in range(rowCount):
 if lead>= colCount:
 return
 i = r
 while m[i][lead] == 0:
 i+=1
 if i == rowCount:
 i = r
 lead +=1
 if colCount == lead:
 return
 m[i],m[r] = m[r],m[i]
 lv = m[r][lead]
 m[r] = [mrx/float(lv) for mrx in m[r]]
 for i in range(rowCount):
 if i != r:
 lv=m[i][lead]
 m[i] = [iv - lv*rv for rv,iv in zip(m[r],m[i])]
 lead+=1 
print("Enter dimensions of matrix: ")
r=int(input("Enter the no of rows: "))
c=int(input("Enter the no of cols: "))
mtr=[]
for i in range (r):
 mtr.append([])
 print("Enter elements of rows ",i)
 for j in range(c):
 n=float(input("Enter element: "))
 mtr[i].append(n)
print("Enter the matrix: ")
for row in mtr:
 print(' '.join(("{0:.2f}".format(x) for x in row)))
row_echelon(mtr)
print("Row Echelon for matrix: ")
for row in mtr:
 print(' '.join(("{0:.2f}".format(x) for x in row)))
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Practical 8: Write a program to find Eigen values and vectors
Code:
import numpy as np
print("Enter dimensions of matrix: ")
r=int(input("Enter the no of rows: "))
c=int(input("Enter the no of cols: "))
mtr=[]
for i in range (r):
 mtr.append([])
 print("Enter elements of rows ",i)
 for j in range(c):
 n=float(input("Enter element: "))
 mtr[i].append(n)
print("Entered matrix: ")
for row in mtr:
 print(' '.join(("{0:.2f}".format(x) for x in row)))
w, v = np.linalg.eig(mtr)
print("Eigen Values Are:",w)
print("Eigen Vectors Are:",v)
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Practical 9: Write a program to implement Gaussian elimination method.
Code:
import numpy as np
import sys
# Reading number of unknowns
n = int(input('Enter number of unknowns: '))
# Making numpy array of n x n+1 size and initializing 
# to zero for storing augmented matrix
a = np.zeros((n,n+1))
# Making numpy array of n size and initializing 
# to zero for storing solution vector
x = np.zeros(n)
# Reading augmented matrix coefficients
print('Enter Augmented Matrix Coefficients:')
for i in range(n):
 for j in range(n+1):
 a[i][j] = float(input( 'a['+str(i)+']['+ str(j)+']='))
# Applying Gauss Elimination
for i in range(n):
 if a[i][i] == 0.0:
 sys.exit('Divide by zero detected!')
 for j in range(i+1, n):
 ratio = a[j][i]/a[i][i]
 for k in range(n+1):
 a[j][k] = a[j][k] - ratio * a[i][k]
# Back Substitution
x[n-1] = a[n-1][n]/a[n-1][n-1]
for i in range(n-2,-1,-1):
 x[i] = a[i][n]
 for j in range(i+1,n):
 x[i] = x[i] - a[i][j]*x[j] 
 x[i] = x[i]/a[i][i]
# Displaying solution
print('\nRequired solution is: ')
for i in range(n):
 print('X%d = %0.2f' %(i,x[i]), end = '\t')
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Practical 10: Write a program to implement concepts of orthogonalization
Code:
def isOrthogonal(a, m, n) :
 if (m != n) :
 return False
 trans = [[0 for x in range(n)]
 for y in range(n)] 
 # Find transpose
 for i in range(0, n) :
 for j in range(0, n) :
 trans[i][j] = a[j][i]
 
 prod = [[0 for x in range(n)]
 for y in range(n)]
 # Find product of a[][]
 # and its transpose
 for i in range(0, n) :
 for j in range(0, n) :
 sum = 0
 for k in range(0, n) :
 sum = sum + (a[i][k] *
 a[j][k])
 prod[i][j] = sum
 for i in range(0, n) :
 for j in range(0, n) :
 if (i != j and prod[i][j] != 0) :
 return False
 if (i == j and prod[i][j] != 1) :
 return False
 return True
a = [[1, 0, 0],
 [0, 1, 0],
 [0, 0, 1]]
 
if (isOrthogonal(a, 3, 3)) :
 print ("Yes")
else :
 print ("No")